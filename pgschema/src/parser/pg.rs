/// Generated by rustemo. Do not edit manually!
use std::fmt::Debug;
use std::hash::Hash;
use rustemo::{
    Result, Input as InputT, Lexer, Token, TokenRecognizer as TokenRecognizerT, Parser,
    ParserDefinition, State as StateT, Builder,
};
use rustemo::regex::Regex;
use rustemo::once_cell::sync::Lazy;
use rustemo::StringLexer;
use rustemo::LRBuilder;
use super::pg_actions;
use rustemo::{LRParser, LRContext};
use rustemo::Action::{self, Shift, Reduce, Accept};
#[allow(unused_imports)]
use rustemo::debug::{log, logn};
#[allow(unused_imports)]
#[cfg(debug_assertions)]
use rustemo::colored::*;
pub type Input = str;
const STATE_COUNT: usize = 82usize;
const MAX_RECOGNIZERS: usize = 6usize;
#[allow(dead_code)]
const TERMINAL_COUNT: usize = 40usize;
#[allow(clippy::upper_case_acronyms)]
#[derive(Debug, Default, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
pub enum TokenKind {
    #[default]
    STOP,
    WS,
    CommentLine,
    NotComment,
    START_COMMENT,
    END_COMMENT,
    QUOTED_STRING,
    IDENTIFIER,
    SEMICOLON,
    CREATE,
    NODE,
    EDGE,
    GRAPH,
    TYPE,
    OPEN_PAREN,
    CLOSE_PAREN,
    OPEN_ARROW,
    CLOSE_ARROW,
    OPEN_CURLY,
    CLOSE_CURLY,
    COLON,
    COMMA,
    BAR,
    PLUS,
    STAR,
    QUESTION,
    INTEGER_NAME,
    STRING_NAME,
    DATE_NAME,
    NUMBER,
    OPTIONAL,
    QUOTE,
    AMPERSAND,
    OPENSQUAREBRACKET,
    CLOSESQUAREBRACKET,
    START_ARROW,
    END_ARROW,
    TRUE,
    FALSE,
    DATE,
}
use TokenKind as TK;
impl From<TokenKind> for usize {
    fn from(t: TokenKind) -> Self {
        t as usize
    }
}
#[allow(clippy::enum_variant_names)]
#[derive(Clone, Copy, PartialEq)]
pub enum ProdKind {
    PgP1,
    DeclarationsP1,
    Declaration1P1,
    Declaration1P2,
    DeclarationP1,
    DeclarationP2,
    NodeP1,
    EdgeP1,
    IdP1,
    LabelsRecordP1,
    LabelsOptP1,
    LabelsOptP2,
    RecordOptP1,
    RecordOptP2,
    LabelsP1,
    IDENTIFIER1P1,
    IDENTIFIER1P2,
    RecordP1,
    PropertiesP1,
    Property1P1,
    Property1P2,
    PropertyP1,
    keyP1,
    ValuesP1,
    ValuesListValue,
    ListValuesP1,
    SingleValue1P1,
    SingleValue1P2,
    SingleValue0P1,
    SingleValue0P2,
    SingleValueStringValue,
    SingleValueNumberValue,
    SingleValueDateValue,
    SingleValueBooleanValue,
    BOOLP1,
    BOOLP2,
    LayoutP1,
    LayoutItem1P1,
    LayoutItem1P2,
    LayoutItem0P1,
    LayoutItem0P2,
    LayoutItemP1,
    LayoutItemP2,
    CommentP1,
    CommentP2,
    CorncsP1,
    Cornc1P1,
    Cornc1P2,
    Cornc0P1,
    Cornc0P2,
    CorncP1,
    CorncP2,
    CorncP3,
}
use ProdKind as PK;
impl std::fmt::Debug for ProdKind {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let name = match self {
            ProdKind::PgP1 => "Pg: Declarations",
            ProdKind::DeclarationsP1 => "Declarations: Declaration1",
            ProdKind::Declaration1P1 => {
                "Declaration1: Declaration1 SEMICOLON Declaration"
            }
            ProdKind::Declaration1P2 => "Declaration1: Declaration",
            ProdKind::DeclarationP1 => "Declaration: Node",
            ProdKind::DeclarationP2 => "Declaration: Edge",
            ProdKind::NodeP1 => "Node: OPEN_PAREN Id LabelsRecord CLOSE_PAREN",
            ProdKind::EdgeP1 => {
                "Edge: OPENSQUAREBRACKET Id COLON OPEN_PAREN IDENTIFIER CLOSE_PAREN START_ARROW LabelsRecord END_ARROW OPEN_PAREN IDENTIFIER CLOSE_PAREN CLOSESQUAREBRACKET"
            }
            ProdKind::IdP1 => "Id: IDENTIFIER",
            ProdKind::LabelsRecordP1 => "LabelsRecord: LabelsOpt RecordOpt",
            ProdKind::LabelsOptP1 => "LabelsOpt: Labels",
            ProdKind::LabelsOptP2 => "LabelsOpt: ",
            ProdKind::RecordOptP1 => "RecordOpt: Record",
            ProdKind::RecordOptP2 => "RecordOpt: ",
            ProdKind::LabelsP1 => "Labels: COLON IDENTIFIER1",
            ProdKind::IDENTIFIER1P1 => "IDENTIFIER1: IDENTIFIER1 AMPERSAND IDENTIFIER",
            ProdKind::IDENTIFIER1P2 => "IDENTIFIER1: IDENTIFIER",
            ProdKind::RecordP1 => "Record: OPEN_CURLY Properties CLOSE_CURLY",
            ProdKind::PropertiesP1 => "Properties: Property1",
            ProdKind::Property1P1 => "Property1: Property1 COMMA Property",
            ProdKind::Property1P2 => "Property1: Property",
            ProdKind::PropertyP1 => "Property: key COLON Values",
            ProdKind::keyP1 => "key: IDENTIFIER",
            ProdKind::ValuesP1 => "Values: SingleValue",
            ProdKind::ValuesListValue => {
                "Values: OPENSQUAREBRACKET ListValues CLOSESQUAREBRACKET"
            }
            ProdKind::ListValuesP1 => "ListValues: SingleValue0",
            ProdKind::SingleValue1P1 => "SingleValue1: SingleValue1 COMMA SingleValue",
            ProdKind::SingleValue1P2 => "SingleValue1: SingleValue",
            ProdKind::SingleValue0P1 => "SingleValue0: SingleValue1",
            ProdKind::SingleValue0P2 => "SingleValue0: ",
            ProdKind::SingleValueStringValue => "SingleValue: QUOTED_STRING",
            ProdKind::SingleValueNumberValue => "SingleValue: NUMBER",
            ProdKind::SingleValueDateValue => "SingleValue: DATE QUOTED_STRING",
            ProdKind::SingleValueBooleanValue => "SingleValue: BOOL",
            ProdKind::BOOLP1 => "BOOL: TRUE",
            ProdKind::BOOLP2 => "BOOL: FALSE",
            ProdKind::LayoutP1 => "Layout: LayoutItem0",
            ProdKind::LayoutItem1P1 => "LayoutItem1: LayoutItem1 LayoutItem",
            ProdKind::LayoutItem1P2 => "LayoutItem1: LayoutItem",
            ProdKind::LayoutItem0P1 => "LayoutItem0: LayoutItem1",
            ProdKind::LayoutItem0P2 => "LayoutItem0: ",
            ProdKind::LayoutItemP1 => "LayoutItem: WS",
            ProdKind::LayoutItemP2 => "LayoutItem: Comment",
            ProdKind::CommentP1 => "Comment: START_COMMENT Corncs END_COMMENT",
            ProdKind::CommentP2 => "Comment: CommentLine",
            ProdKind::CorncsP1 => "Corncs: Cornc0",
            ProdKind::Cornc1P1 => "Cornc1: Cornc1 Cornc",
            ProdKind::Cornc1P2 => "Cornc1: Cornc",
            ProdKind::Cornc0P1 => "Cornc0: Cornc1",
            ProdKind::Cornc0P2 => "Cornc0: ",
            ProdKind::CorncP1 => "Cornc: Comment",
            ProdKind::CorncP2 => "Cornc: NotComment",
            ProdKind::CorncP3 => "Cornc: WS",
        };
        write!(f, "{name}")
    }
}
#[allow(clippy::upper_case_acronyms)]
#[allow(dead_code)]
#[derive(Clone, Copy, Debug)]
pub enum NonTermKind {
    EMPTY,
    AUG,
    AUGL,
    Pg,
    Declarations,
    Declaration1,
    Declaration,
    Node,
    Edge,
    Id,
    LabelsRecord,
    LabelsOpt,
    RecordOpt,
    Labels,
    IDENTIFIER1,
    Record,
    Properties,
    Property1,
    Property,
    key,
    Values,
    ListValues,
    SingleValue1,
    SingleValue0,
    SingleValue,
    BOOL,
    Layout,
    LayoutItem1,
    LayoutItem0,
    LayoutItem,
    Comment,
    Corncs,
    Cornc1,
    Cornc0,
    Cornc,
}
impl From<ProdKind> for NonTermKind {
    fn from(prod: ProdKind) -> Self {
        match prod {
            ProdKind::PgP1 => NonTermKind::Pg,
            ProdKind::DeclarationsP1 => NonTermKind::Declarations,
            ProdKind::Declaration1P1 => NonTermKind::Declaration1,
            ProdKind::Declaration1P2 => NonTermKind::Declaration1,
            ProdKind::DeclarationP1 => NonTermKind::Declaration,
            ProdKind::DeclarationP2 => NonTermKind::Declaration,
            ProdKind::NodeP1 => NonTermKind::Node,
            ProdKind::EdgeP1 => NonTermKind::Edge,
            ProdKind::IdP1 => NonTermKind::Id,
            ProdKind::LabelsRecordP1 => NonTermKind::LabelsRecord,
            ProdKind::LabelsOptP1 => NonTermKind::LabelsOpt,
            ProdKind::LabelsOptP2 => NonTermKind::LabelsOpt,
            ProdKind::RecordOptP1 => NonTermKind::RecordOpt,
            ProdKind::RecordOptP2 => NonTermKind::RecordOpt,
            ProdKind::LabelsP1 => NonTermKind::Labels,
            ProdKind::IDENTIFIER1P1 => NonTermKind::IDENTIFIER1,
            ProdKind::IDENTIFIER1P2 => NonTermKind::IDENTIFIER1,
            ProdKind::RecordP1 => NonTermKind::Record,
            ProdKind::PropertiesP1 => NonTermKind::Properties,
            ProdKind::Property1P1 => NonTermKind::Property1,
            ProdKind::Property1P2 => NonTermKind::Property1,
            ProdKind::PropertyP1 => NonTermKind::Property,
            ProdKind::keyP1 => NonTermKind::key,
            ProdKind::ValuesP1 => NonTermKind::Values,
            ProdKind::ValuesListValue => NonTermKind::Values,
            ProdKind::ListValuesP1 => NonTermKind::ListValues,
            ProdKind::SingleValue1P1 => NonTermKind::SingleValue1,
            ProdKind::SingleValue1P2 => NonTermKind::SingleValue1,
            ProdKind::SingleValue0P1 => NonTermKind::SingleValue0,
            ProdKind::SingleValue0P2 => NonTermKind::SingleValue0,
            ProdKind::SingleValueStringValue => NonTermKind::SingleValue,
            ProdKind::SingleValueNumberValue => NonTermKind::SingleValue,
            ProdKind::SingleValueDateValue => NonTermKind::SingleValue,
            ProdKind::SingleValueBooleanValue => NonTermKind::SingleValue,
            ProdKind::BOOLP1 => NonTermKind::BOOL,
            ProdKind::BOOLP2 => NonTermKind::BOOL,
            ProdKind::LayoutP1 => NonTermKind::Layout,
            ProdKind::LayoutItem1P1 => NonTermKind::LayoutItem1,
            ProdKind::LayoutItem1P2 => NonTermKind::LayoutItem1,
            ProdKind::LayoutItem0P1 => NonTermKind::LayoutItem0,
            ProdKind::LayoutItem0P2 => NonTermKind::LayoutItem0,
            ProdKind::LayoutItemP1 => NonTermKind::LayoutItem,
            ProdKind::LayoutItemP2 => NonTermKind::LayoutItem,
            ProdKind::CommentP1 => NonTermKind::Comment,
            ProdKind::CommentP2 => NonTermKind::Comment,
            ProdKind::CorncsP1 => NonTermKind::Corncs,
            ProdKind::Cornc1P1 => NonTermKind::Cornc1,
            ProdKind::Cornc1P2 => NonTermKind::Cornc1,
            ProdKind::Cornc0P1 => NonTermKind::Cornc0,
            ProdKind::Cornc0P2 => NonTermKind::Cornc0,
            ProdKind::CorncP1 => NonTermKind::Cornc,
            ProdKind::CorncP2 => NonTermKind::Cornc,
            ProdKind::CorncP3 => NonTermKind::Cornc,
        }
    }
}
#[allow(clippy::enum_variant_names)]
#[derive(Default, Clone, Copy, PartialEq, Eq, PartialOrd, Ord)]
pub enum State {
    #[default]
    AUGS0,
    OPEN_PARENS1,
    OPENSQUAREBRACKETS2,
    PgS3,
    DeclarationsS4,
    Declaration1S5,
    DeclarationS6,
    NodeS7,
    EdgeS8,
    IDENTIFIERS9,
    IdS10,
    IdS11,
    SEMICOLONS12,
    COLONS13,
    LabelsRecordS14,
    LabelsOptS15,
    LabelsS16,
    COLONS17,
    DeclarationS18,
    IDENTIFIERS19,
    IDENTIFIER1S20,
    CLOSE_PARENS21,
    OPEN_CURLYS22,
    RecordOptS23,
    RecordS24,
    OPEN_PARENS25,
    AMPERSANDS26,
    IDENTIFIERS27,
    PropertiesS28,
    Property1S29,
    PropertyS30,
    keyS31,
    IDENTIFIERS32,
    IDENTIFIERS33,
    CLOSE_CURLYS34,
    COMMAS35,
    COLONS36,
    CLOSE_PARENS37,
    PropertyS38,
    QUOTED_STRINGS39,
    NUMBERS40,
    OPENSQUAREBRACKETS41,
    TRUES42,
    FALSES43,
    DATES44,
    ValuesS45,
    SingleValueS46,
    BOOLS47,
    START_ARROWS48,
    ListValuesS49,
    SingleValue1S50,
    SingleValue0S51,
    SingleValueS52,
    QUOTED_STRINGS53,
    LabelsRecordS54,
    CLOSESQUAREBRACKETS55,
    COMMAS56,
    END_ARROWS57,
    SingleValueS58,
    OPEN_PARENS59,
    IDENTIFIERS60,
    CLOSE_PARENS61,
    CLOSESQUAREBRACKETS62,
    AUGLS63,
    WSS64,
    CommentLineS65,
    START_COMMENTS66,
    LayoutS67,
    LayoutItem1S68,
    LayoutItem0S69,
    LayoutItemS70,
    CommentS71,
    WSS72,
    NotCommentS73,
    CommentS74,
    CorncsS75,
    Cornc1S76,
    Cornc0S77,
    CorncS78,
    LayoutItemS79,
    END_COMMENTS80,
    CorncS81,
}
impl StateT for State {
    fn default_layout() -> Option<Self> {
        Some(State::AUGLS63)
    }
}
impl From<State> for usize {
    fn from(s: State) -> Self {
        s as usize
    }
}
impl std::fmt::Debug for State {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let name = match self {
            State::AUGS0 => "0:AUG",
            State::OPEN_PARENS1 => "1:OPEN_PAREN",
            State::OPENSQUAREBRACKETS2 => "2:OPENSQUAREBRACKET",
            State::PgS3 => "3:Pg",
            State::DeclarationsS4 => "4:Declarations",
            State::Declaration1S5 => "5:Declaration1",
            State::DeclarationS6 => "6:Declaration",
            State::NodeS7 => "7:Node",
            State::EdgeS8 => "8:Edge",
            State::IDENTIFIERS9 => "9:IDENTIFIER",
            State::IdS10 => "10:Id",
            State::IdS11 => "11:Id",
            State::SEMICOLONS12 => "12:SEMICOLON",
            State::COLONS13 => "13:COLON",
            State::LabelsRecordS14 => "14:LabelsRecord",
            State::LabelsOptS15 => "15:LabelsOpt",
            State::LabelsS16 => "16:Labels",
            State::COLONS17 => "17:COLON",
            State::DeclarationS18 => "18:Declaration",
            State::IDENTIFIERS19 => "19:IDENTIFIER",
            State::IDENTIFIER1S20 => "20:IDENTIFIER1",
            State::CLOSE_PARENS21 => "21:CLOSE_PAREN",
            State::OPEN_CURLYS22 => "22:OPEN_CURLY",
            State::RecordOptS23 => "23:RecordOpt",
            State::RecordS24 => "24:Record",
            State::OPEN_PARENS25 => "25:OPEN_PAREN",
            State::AMPERSANDS26 => "26:AMPERSAND",
            State::IDENTIFIERS27 => "27:IDENTIFIER",
            State::PropertiesS28 => "28:Properties",
            State::Property1S29 => "29:Property1",
            State::PropertyS30 => "30:Property",
            State::keyS31 => "31:key",
            State::IDENTIFIERS32 => "32:IDENTIFIER",
            State::IDENTIFIERS33 => "33:IDENTIFIER",
            State::CLOSE_CURLYS34 => "34:CLOSE_CURLY",
            State::COMMAS35 => "35:COMMA",
            State::COLONS36 => "36:COLON",
            State::CLOSE_PARENS37 => "37:CLOSE_PAREN",
            State::PropertyS38 => "38:Property",
            State::QUOTED_STRINGS39 => "39:QUOTED_STRING",
            State::NUMBERS40 => "40:NUMBER",
            State::OPENSQUAREBRACKETS41 => "41:OPENSQUAREBRACKET",
            State::TRUES42 => "42:TRUE",
            State::FALSES43 => "43:FALSE",
            State::DATES44 => "44:DATE",
            State::ValuesS45 => "45:Values",
            State::SingleValueS46 => "46:SingleValue",
            State::BOOLS47 => "47:BOOL",
            State::START_ARROWS48 => "48:START_ARROW",
            State::ListValuesS49 => "49:ListValues",
            State::SingleValue1S50 => "50:SingleValue1",
            State::SingleValue0S51 => "51:SingleValue0",
            State::SingleValueS52 => "52:SingleValue",
            State::QUOTED_STRINGS53 => "53:QUOTED_STRING",
            State::LabelsRecordS54 => "54:LabelsRecord",
            State::CLOSESQUAREBRACKETS55 => "55:CLOSESQUAREBRACKET",
            State::COMMAS56 => "56:COMMA",
            State::END_ARROWS57 => "57:END_ARROW",
            State::SingleValueS58 => "58:SingleValue",
            State::OPEN_PARENS59 => "59:OPEN_PAREN",
            State::IDENTIFIERS60 => "60:IDENTIFIER",
            State::CLOSE_PARENS61 => "61:CLOSE_PAREN",
            State::CLOSESQUAREBRACKETS62 => "62:CLOSESQUAREBRACKET",
            State::AUGLS63 => "63:AUGL",
            State::WSS64 => "64:WS",
            State::CommentLineS65 => "65:CommentLine",
            State::START_COMMENTS66 => "66:START_COMMENT",
            State::LayoutS67 => "67:Layout",
            State::LayoutItem1S68 => "68:LayoutItem1",
            State::LayoutItem0S69 => "69:LayoutItem0",
            State::LayoutItemS70 => "70:LayoutItem",
            State::CommentS71 => "71:Comment",
            State::WSS72 => "72:WS",
            State::NotCommentS73 => "73:NotComment",
            State::CommentS74 => "74:Comment",
            State::CorncsS75 => "75:Corncs",
            State::Cornc1S76 => "76:Cornc1",
            State::Cornc0S77 => "77:Cornc0",
            State::CorncS78 => "78:Cornc",
            State::LayoutItemS79 => "79:LayoutItem",
            State::END_COMMENTS80 => "80:END_COMMENT",
            State::CorncS81 => "81:Cornc",
        };
        write!(f, "{name}")
    }
}
#[derive(Debug)]
pub enum Symbol {
    Terminal(Terminal),
    NonTerminal(NonTerminal),
}
#[allow(clippy::upper_case_acronyms)]
#[derive(Debug)]
pub enum Terminal {
    QUOTED_STRING(pg_actions::QUOTED_STRING),
    IDENTIFIER(pg_actions::IDENTIFIER),
    SEMICOLON,
    OPEN_PAREN,
    CLOSE_PAREN,
    OPEN_CURLY,
    CLOSE_CURLY,
    COLON,
    COMMA,
    NUMBER(pg_actions::NUMBER),
    AMPERSAND,
    OPENSQUAREBRACKET,
    CLOSESQUAREBRACKET,
    START_ARROW,
    END_ARROW,
    TRUE,
    FALSE,
    DATE,
}
#[derive(Debug)]
pub enum NonTerminal {
    Pg(pg_actions::Pg),
    Declarations(pg_actions::Declarations),
    Declaration1(pg_actions::Declaration1),
    Declaration(pg_actions::Declaration),
    Node(pg_actions::Node),
    Edge(pg_actions::Edge),
    Id(pg_actions::Id),
    LabelsRecord(pg_actions::LabelsRecord),
    LabelsOpt(pg_actions::LabelsOpt),
    RecordOpt(pg_actions::RecordOpt),
    Labels(pg_actions::Labels),
    IDENTIFIER1(pg_actions::IDENTIFIER1),
    Record(pg_actions::Record),
    Properties(pg_actions::Properties),
    Property1(pg_actions::Property1),
    Property(pg_actions::Property),
    key(pg_actions::key),
    Values(pg_actions::Values),
    ListValues(pg_actions::ListValues),
    SingleValue1(pg_actions::SingleValue1),
    SingleValue0(pg_actions::SingleValue0),
    SingleValue(pg_actions::SingleValue),
    BOOL(pg_actions::BOOL),
}
type ActionFn = fn(token: TokenKind) -> Vec<Action<State, ProdKind>>;
pub struct PgParserDefinition {
    actions: [ActionFn; STATE_COUNT],
    gotos: [fn(nonterm: NonTermKind) -> State; STATE_COUNT],
    token_kinds: [[Option<(TokenKind, bool)>; MAX_RECOGNIZERS]; STATE_COUNT],
}
fn action_aug_s0(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::OPEN_PAREN => Vec::from(&[Shift(State::OPEN_PARENS1)]),
        TK::OPENSQUAREBRACKET => Vec::from(&[Shift(State::OPENSQUAREBRACKETS2)]),
        _ => vec![],
    }
}
fn action_open_paren_s1(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::IDENTIFIER => Vec::from(&[Shift(State::IDENTIFIERS9)]),
        _ => vec![],
    }
}
fn action_opensquarebracket_s2(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::IDENTIFIER => Vec::from(&[Shift(State::IDENTIFIERS9)]),
        _ => vec![],
    }
}
fn action_pg_s3(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Accept]),
        _ => vec![],
    }
}
fn action_declarations_s4(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::PgP1, 1usize)]),
        _ => vec![],
    }
}
fn action_declaration1_s5(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::DeclarationsP1, 1usize)]),
        TK::SEMICOLON => Vec::from(&[Shift(State::SEMICOLONS12)]),
        _ => vec![],
    }
}
fn action_declaration_s6(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::Declaration1P2, 1usize)]),
        TK::SEMICOLON => Vec::from(&[Reduce(PK::Declaration1P2, 1usize)]),
        _ => vec![],
    }
}
fn action_node_s7(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::DeclarationP1, 1usize)]),
        TK::SEMICOLON => Vec::from(&[Reduce(PK::DeclarationP1, 1usize)]),
        _ => vec![],
    }
}
fn action_edge_s8(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::DeclarationP2, 1usize)]),
        TK::SEMICOLON => Vec::from(&[Reduce(PK::DeclarationP2, 1usize)]),
        _ => vec![],
    }
}
fn action_identifier_s9(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::CLOSE_PAREN => Vec::from(&[Reduce(PK::IdP1, 1usize)]),
        TK::OPEN_CURLY => Vec::from(&[Reduce(PK::IdP1, 1usize)]),
        TK::COLON => Vec::from(&[Reduce(PK::IdP1, 1usize)]),
        _ => vec![],
    }
}
fn action_id_s10(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::CLOSE_PAREN => Vec::from(&[Reduce(PK::LabelsOptP2, 0usize)]),
        TK::OPEN_CURLY => Vec::from(&[Reduce(PK::LabelsOptP2, 0usize)]),
        TK::COLON => Vec::from(&[Shift(State::COLONS13)]),
        _ => vec![],
    }
}
fn action_id_s11(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::COLON => Vec::from(&[Shift(State::COLONS17)]),
        _ => vec![],
    }
}
fn action_semicolon_s12(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::OPEN_PAREN => Vec::from(&[Shift(State::OPEN_PARENS1)]),
        TK::OPENSQUAREBRACKET => Vec::from(&[Shift(State::OPENSQUAREBRACKETS2)]),
        _ => vec![],
    }
}
fn action_colon_s13(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::IDENTIFIER => Vec::from(&[Shift(State::IDENTIFIERS19)]),
        _ => vec![],
    }
}
fn action_labelsrecord_s14(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::CLOSE_PAREN => Vec::from(&[Shift(State::CLOSE_PARENS21)]),
        _ => vec![],
    }
}
fn action_labelsopt_s15(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::CLOSE_PAREN => Vec::from(&[Reduce(PK::RecordOptP2, 0usize)]),
        TK::OPEN_CURLY => Vec::from(&[Shift(State::OPEN_CURLYS22)]),
        TK::END_ARROW => Vec::from(&[Reduce(PK::RecordOptP2, 0usize)]),
        _ => vec![],
    }
}
fn action_labels_s16(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::CLOSE_PAREN => Vec::from(&[Reduce(PK::LabelsOptP1, 1usize)]),
        TK::OPEN_CURLY => Vec::from(&[Reduce(PK::LabelsOptP1, 1usize)]),
        TK::END_ARROW => Vec::from(&[Reduce(PK::LabelsOptP1, 1usize)]),
        _ => vec![],
    }
}
fn action_colon_s17(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::OPEN_PAREN => Vec::from(&[Shift(State::OPEN_PARENS25)]),
        _ => vec![],
    }
}
fn action_declaration_s18(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::Declaration1P1, 3usize)]),
        TK::SEMICOLON => Vec::from(&[Reduce(PK::Declaration1P1, 3usize)]),
        _ => vec![],
    }
}
fn action_identifier_s19(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::CLOSE_PAREN => Vec::from(&[Reduce(PK::IDENTIFIER1P2, 1usize)]),
        TK::OPEN_CURLY => Vec::from(&[Reduce(PK::IDENTIFIER1P2, 1usize)]),
        TK::AMPERSAND => Vec::from(&[Reduce(PK::IDENTIFIER1P2, 1usize)]),
        TK::END_ARROW => Vec::from(&[Reduce(PK::IDENTIFIER1P2, 1usize)]),
        _ => vec![],
    }
}
fn action_identifier1_s20(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::CLOSE_PAREN => Vec::from(&[Reduce(PK::LabelsP1, 2usize)]),
        TK::OPEN_CURLY => Vec::from(&[Reduce(PK::LabelsP1, 2usize)]),
        TK::AMPERSAND => Vec::from(&[Shift(State::AMPERSANDS26)]),
        TK::END_ARROW => Vec::from(&[Reduce(PK::LabelsP1, 2usize)]),
        _ => vec![],
    }
}
fn action_close_paren_s21(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::NodeP1, 4usize)]),
        TK::SEMICOLON => Vec::from(&[Reduce(PK::NodeP1, 4usize)]),
        _ => vec![],
    }
}
fn action_open_curly_s22(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::IDENTIFIER => Vec::from(&[Shift(State::IDENTIFIERS27)]),
        _ => vec![],
    }
}
fn action_recordopt_s23(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::CLOSE_PAREN => Vec::from(&[Reduce(PK::LabelsRecordP1, 2usize)]),
        TK::END_ARROW => Vec::from(&[Reduce(PK::LabelsRecordP1, 2usize)]),
        _ => vec![],
    }
}
fn action_record_s24(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::CLOSE_PAREN => Vec::from(&[Reduce(PK::RecordOptP1, 1usize)]),
        TK::END_ARROW => Vec::from(&[Reduce(PK::RecordOptP1, 1usize)]),
        _ => vec![],
    }
}
fn action_open_paren_s25(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::IDENTIFIER => Vec::from(&[Shift(State::IDENTIFIERS32)]),
        _ => vec![],
    }
}
fn action_ampersand_s26(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::IDENTIFIER => Vec::from(&[Shift(State::IDENTIFIERS33)]),
        _ => vec![],
    }
}
fn action_identifier_s27(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::COLON => Vec::from(&[Reduce(PK::keyP1, 1usize)]),
        _ => vec![],
    }
}
fn action_properties_s28(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::CLOSE_CURLY => Vec::from(&[Shift(State::CLOSE_CURLYS34)]),
        _ => vec![],
    }
}
fn action_property1_s29(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::CLOSE_CURLY => Vec::from(&[Reduce(PK::PropertiesP1, 1usize)]),
        TK::COMMA => Vec::from(&[Shift(State::COMMAS35)]),
        _ => vec![],
    }
}
fn action_property_s30(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::CLOSE_CURLY => Vec::from(&[Reduce(PK::Property1P2, 1usize)]),
        TK::COMMA => Vec::from(&[Reduce(PK::Property1P2, 1usize)]),
        _ => vec![],
    }
}
fn action_key_s31(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::COLON => Vec::from(&[Shift(State::COLONS36)]),
        _ => vec![],
    }
}
fn action_identifier_s32(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::CLOSE_PAREN => Vec::from(&[Shift(State::CLOSE_PARENS37)]),
        _ => vec![],
    }
}
fn action_identifier_s33(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::CLOSE_PAREN => Vec::from(&[Reduce(PK::IDENTIFIER1P1, 3usize)]),
        TK::OPEN_CURLY => Vec::from(&[Reduce(PK::IDENTIFIER1P1, 3usize)]),
        TK::AMPERSAND => Vec::from(&[Reduce(PK::IDENTIFIER1P1, 3usize)]),
        TK::END_ARROW => Vec::from(&[Reduce(PK::IDENTIFIER1P1, 3usize)]),
        _ => vec![],
    }
}
fn action_close_curly_s34(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::CLOSE_PAREN => Vec::from(&[Reduce(PK::RecordP1, 3usize)]),
        TK::END_ARROW => Vec::from(&[Reduce(PK::RecordP1, 3usize)]),
        _ => vec![],
    }
}
fn action_comma_s35(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::IDENTIFIER => Vec::from(&[Shift(State::IDENTIFIERS27)]),
        _ => vec![],
    }
}
fn action_colon_s36(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::QUOTED_STRING => Vec::from(&[Shift(State::QUOTED_STRINGS39)]),
        TK::NUMBER => Vec::from(&[Shift(State::NUMBERS40)]),
        TK::OPENSQUAREBRACKET => Vec::from(&[Shift(State::OPENSQUAREBRACKETS41)]),
        TK::TRUE => Vec::from(&[Shift(State::TRUES42)]),
        TK::FALSE => Vec::from(&[Shift(State::FALSES43)]),
        TK::DATE => Vec::from(&[Shift(State::DATES44)]),
        _ => vec![],
    }
}
fn action_close_paren_s37(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::START_ARROW => Vec::from(&[Shift(State::START_ARROWS48)]),
        _ => vec![],
    }
}
fn action_property_s38(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::CLOSE_CURLY => Vec::from(&[Reduce(PK::Property1P1, 3usize)]),
        TK::COMMA => Vec::from(&[Reduce(PK::Property1P1, 3usize)]),
        _ => vec![],
    }
}
fn action_quoted_string_s39(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::CLOSE_CURLY => Vec::from(&[Reduce(PK::SingleValueStringValue, 1usize)]),
        TK::COMMA => Vec::from(&[Reduce(PK::SingleValueStringValue, 1usize)]),
        TK::CLOSESQUAREBRACKET => {
            Vec::from(&[Reduce(PK::SingleValueStringValue, 1usize)])
        }
        _ => vec![],
    }
}
fn action_number_s40(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::CLOSE_CURLY => Vec::from(&[Reduce(PK::SingleValueNumberValue, 1usize)]),
        TK::COMMA => Vec::from(&[Reduce(PK::SingleValueNumberValue, 1usize)]),
        TK::CLOSESQUAREBRACKET => {
            Vec::from(&[Reduce(PK::SingleValueNumberValue, 1usize)])
        }
        _ => vec![],
    }
}
fn action_opensquarebracket_s41(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::QUOTED_STRING => Vec::from(&[Shift(State::QUOTED_STRINGS39)]),
        TK::NUMBER => Vec::from(&[Shift(State::NUMBERS40)]),
        TK::CLOSESQUAREBRACKET => Vec::from(&[Reduce(PK::SingleValue0P2, 0usize)]),
        TK::TRUE => Vec::from(&[Shift(State::TRUES42)]),
        TK::FALSE => Vec::from(&[Shift(State::FALSES43)]),
        TK::DATE => Vec::from(&[Shift(State::DATES44)]),
        _ => vec![],
    }
}
fn action_true_s42(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::CLOSE_CURLY => Vec::from(&[Reduce(PK::BOOLP1, 1usize)]),
        TK::COMMA => Vec::from(&[Reduce(PK::BOOLP1, 1usize)]),
        TK::CLOSESQUAREBRACKET => Vec::from(&[Reduce(PK::BOOLP1, 1usize)]),
        _ => vec![],
    }
}
fn action_false_s43(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::CLOSE_CURLY => Vec::from(&[Reduce(PK::BOOLP2, 1usize)]),
        TK::COMMA => Vec::from(&[Reduce(PK::BOOLP2, 1usize)]),
        TK::CLOSESQUAREBRACKET => Vec::from(&[Reduce(PK::BOOLP2, 1usize)]),
        _ => vec![],
    }
}
fn action_date_s44(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::QUOTED_STRING => Vec::from(&[Shift(State::QUOTED_STRINGS53)]),
        _ => vec![],
    }
}
fn action_values_s45(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::CLOSE_CURLY => Vec::from(&[Reduce(PK::PropertyP1, 3usize)]),
        TK::COMMA => Vec::from(&[Reduce(PK::PropertyP1, 3usize)]),
        _ => vec![],
    }
}
fn action_singlevalue_s46(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::CLOSE_CURLY => Vec::from(&[Reduce(PK::ValuesP1, 1usize)]),
        TK::COMMA => Vec::from(&[Reduce(PK::ValuesP1, 1usize)]),
        _ => vec![],
    }
}
fn action_bool_s47(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::CLOSE_CURLY => Vec::from(&[Reduce(PK::SingleValueBooleanValue, 1usize)]),
        TK::COMMA => Vec::from(&[Reduce(PK::SingleValueBooleanValue, 1usize)]),
        TK::CLOSESQUAREBRACKET => {
            Vec::from(&[Reduce(PK::SingleValueBooleanValue, 1usize)])
        }
        _ => vec![],
    }
}
fn action_start_arrow_s48(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::OPEN_CURLY => Vec::from(&[Reduce(PK::LabelsOptP2, 0usize)]),
        TK::COLON => Vec::from(&[Shift(State::COLONS13)]),
        TK::END_ARROW => Vec::from(&[Reduce(PK::LabelsOptP2, 0usize)]),
        _ => vec![],
    }
}
fn action_listvalues_s49(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::CLOSESQUAREBRACKET => Vec::from(&[Shift(State::CLOSESQUAREBRACKETS55)]),
        _ => vec![],
    }
}
fn action_singlevalue1_s50(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::COMMA => Vec::from(&[Shift(State::COMMAS56)]),
        TK::CLOSESQUAREBRACKET => Vec::from(&[Reduce(PK::SingleValue0P1, 1usize)]),
        _ => vec![],
    }
}
fn action_singlevalue0_s51(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::CLOSESQUAREBRACKET => Vec::from(&[Reduce(PK::ListValuesP1, 1usize)]),
        _ => vec![],
    }
}
fn action_singlevalue_s52(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::COMMA => Vec::from(&[Reduce(PK::SingleValue1P2, 1usize)]),
        TK::CLOSESQUAREBRACKET => Vec::from(&[Reduce(PK::SingleValue1P2, 1usize)]),
        _ => vec![],
    }
}
fn action_quoted_string_s53(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::CLOSE_CURLY => Vec::from(&[Reduce(PK::SingleValueDateValue, 2usize)]),
        TK::COMMA => Vec::from(&[Reduce(PK::SingleValueDateValue, 2usize)]),
        TK::CLOSESQUAREBRACKET => Vec::from(&[Reduce(PK::SingleValueDateValue, 2usize)]),
        _ => vec![],
    }
}
fn action_labelsrecord_s54(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::END_ARROW => Vec::from(&[Shift(State::END_ARROWS57)]),
        _ => vec![],
    }
}
fn action_closesquarebracket_s55(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::CLOSE_CURLY => Vec::from(&[Reduce(PK::ValuesListValue, 3usize)]),
        TK::COMMA => Vec::from(&[Reduce(PK::ValuesListValue, 3usize)]),
        _ => vec![],
    }
}
fn action_comma_s56(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::QUOTED_STRING => Vec::from(&[Shift(State::QUOTED_STRINGS39)]),
        TK::NUMBER => Vec::from(&[Shift(State::NUMBERS40)]),
        TK::TRUE => Vec::from(&[Shift(State::TRUES42)]),
        TK::FALSE => Vec::from(&[Shift(State::FALSES43)]),
        TK::DATE => Vec::from(&[Shift(State::DATES44)]),
        _ => vec![],
    }
}
fn action_end_arrow_s57(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::OPEN_PAREN => Vec::from(&[Shift(State::OPEN_PARENS59)]),
        _ => vec![],
    }
}
fn action_singlevalue_s58(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::COMMA => Vec::from(&[Reduce(PK::SingleValue1P1, 3usize)]),
        TK::CLOSESQUAREBRACKET => Vec::from(&[Reduce(PK::SingleValue1P1, 3usize)]),
        _ => vec![],
    }
}
fn action_open_paren_s59(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::IDENTIFIER => Vec::from(&[Shift(State::IDENTIFIERS60)]),
        _ => vec![],
    }
}
fn action_identifier_s60(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::CLOSE_PAREN => Vec::from(&[Shift(State::CLOSE_PARENS61)]),
        _ => vec![],
    }
}
fn action_close_paren_s61(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::CLOSESQUAREBRACKET => Vec::from(&[Shift(State::CLOSESQUAREBRACKETS62)]),
        _ => vec![],
    }
}
fn action_closesquarebracket_s62(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::EdgeP1, 13usize)]),
        TK::SEMICOLON => Vec::from(&[Reduce(PK::EdgeP1, 13usize)]),
        _ => vec![],
    }
}
fn action_augl_s63(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::LayoutItem0P2, 0usize)]),
        TK::WS => Vec::from(&[Shift(State::WSS64)]),
        TK::CommentLine => Vec::from(&[Shift(State::CommentLineS65)]),
        TK::START_COMMENT => Vec::from(&[Shift(State::START_COMMENTS66)]),
        _ => vec![],
    }
}
fn action_ws_s64(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::LayoutItemP1, 1usize)]),
        TK::WS => Vec::from(&[Reduce(PK::LayoutItemP1, 1usize)]),
        TK::CommentLine => Vec::from(&[Reduce(PK::LayoutItemP1, 1usize)]),
        TK::START_COMMENT => Vec::from(&[Reduce(PK::LayoutItemP1, 1usize)]),
        _ => vec![],
    }
}
fn action_commentline_s65(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::CommentP2, 1usize)]),
        TK::WS => Vec::from(&[Reduce(PK::CommentP2, 1usize)]),
        TK::CommentLine => Vec::from(&[Reduce(PK::CommentP2, 1usize)]),
        TK::NotComment => Vec::from(&[Reduce(PK::CommentP2, 1usize)]),
        TK::START_COMMENT => Vec::from(&[Reduce(PK::CommentP2, 1usize)]),
        TK::END_COMMENT => Vec::from(&[Reduce(PK::CommentP2, 1usize)]),
        _ => vec![],
    }
}
fn action_start_comment_s66(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::WS => Vec::from(&[Shift(State::WSS72)]),
        TK::CommentLine => Vec::from(&[Shift(State::CommentLineS65)]),
        TK::NotComment => Vec::from(&[Shift(State::NotCommentS73)]),
        TK::START_COMMENT => Vec::from(&[Shift(State::START_COMMENTS66)]),
        TK::END_COMMENT => Vec::from(&[Reduce(PK::Cornc0P2, 0usize)]),
        _ => vec![],
    }
}
fn action_layout_s67(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Accept]),
        _ => vec![],
    }
}
fn action_layoutitem1_s68(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::LayoutItem0P1, 1usize)]),
        TK::WS => Vec::from(&[Shift(State::WSS64)]),
        TK::CommentLine => Vec::from(&[Shift(State::CommentLineS65)]),
        TK::START_COMMENT => Vec::from(&[Shift(State::START_COMMENTS66)]),
        _ => vec![],
    }
}
fn action_layoutitem0_s69(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::LayoutP1, 1usize)]),
        _ => vec![],
    }
}
fn action_layoutitem_s70(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::LayoutItem1P2, 1usize)]),
        TK::WS => Vec::from(&[Reduce(PK::LayoutItem1P2, 1usize)]),
        TK::CommentLine => Vec::from(&[Reduce(PK::LayoutItem1P2, 1usize)]),
        TK::START_COMMENT => Vec::from(&[Reduce(PK::LayoutItem1P2, 1usize)]),
        _ => vec![],
    }
}
fn action_comment_s71(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::LayoutItemP2, 1usize)]),
        TK::WS => Vec::from(&[Reduce(PK::LayoutItemP2, 1usize)]),
        TK::CommentLine => Vec::from(&[Reduce(PK::LayoutItemP2, 1usize)]),
        TK::START_COMMENT => Vec::from(&[Reduce(PK::LayoutItemP2, 1usize)]),
        _ => vec![],
    }
}
fn action_ws_s72(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::WS => Vec::from(&[Reduce(PK::CorncP3, 1usize)]),
        TK::CommentLine => Vec::from(&[Reduce(PK::CorncP3, 1usize)]),
        TK::NotComment => Vec::from(&[Reduce(PK::CorncP3, 1usize)]),
        TK::START_COMMENT => Vec::from(&[Reduce(PK::CorncP3, 1usize)]),
        TK::END_COMMENT => Vec::from(&[Reduce(PK::CorncP3, 1usize)]),
        _ => vec![],
    }
}
fn action_notcomment_s73(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::WS => Vec::from(&[Reduce(PK::CorncP2, 1usize)]),
        TK::CommentLine => Vec::from(&[Reduce(PK::CorncP2, 1usize)]),
        TK::NotComment => Vec::from(&[Reduce(PK::CorncP2, 1usize)]),
        TK::START_COMMENT => Vec::from(&[Reduce(PK::CorncP2, 1usize)]),
        TK::END_COMMENT => Vec::from(&[Reduce(PK::CorncP2, 1usize)]),
        _ => vec![],
    }
}
fn action_comment_s74(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::WS => Vec::from(&[Reduce(PK::CorncP1, 1usize)]),
        TK::CommentLine => Vec::from(&[Reduce(PK::CorncP1, 1usize)]),
        TK::NotComment => Vec::from(&[Reduce(PK::CorncP1, 1usize)]),
        TK::START_COMMENT => Vec::from(&[Reduce(PK::CorncP1, 1usize)]),
        TK::END_COMMENT => Vec::from(&[Reduce(PK::CorncP1, 1usize)]),
        _ => vec![],
    }
}
fn action_corncs_s75(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::END_COMMENT => Vec::from(&[Shift(State::END_COMMENTS80)]),
        _ => vec![],
    }
}
fn action_cornc1_s76(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::WS => Vec::from(&[Shift(State::WSS72)]),
        TK::CommentLine => Vec::from(&[Shift(State::CommentLineS65)]),
        TK::NotComment => Vec::from(&[Shift(State::NotCommentS73)]),
        TK::START_COMMENT => Vec::from(&[Shift(State::START_COMMENTS66)]),
        TK::END_COMMENT => Vec::from(&[Reduce(PK::Cornc0P1, 1usize)]),
        _ => vec![],
    }
}
fn action_cornc0_s77(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::END_COMMENT => Vec::from(&[Reduce(PK::CorncsP1, 1usize)]),
        _ => vec![],
    }
}
fn action_cornc_s78(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::WS => Vec::from(&[Reduce(PK::Cornc1P2, 1usize)]),
        TK::CommentLine => Vec::from(&[Reduce(PK::Cornc1P2, 1usize)]),
        TK::NotComment => Vec::from(&[Reduce(PK::Cornc1P2, 1usize)]),
        TK::START_COMMENT => Vec::from(&[Reduce(PK::Cornc1P2, 1usize)]),
        TK::END_COMMENT => Vec::from(&[Reduce(PK::Cornc1P2, 1usize)]),
        _ => vec![],
    }
}
fn action_layoutitem_s79(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::LayoutItem1P1, 2usize)]),
        TK::WS => Vec::from(&[Reduce(PK::LayoutItem1P1, 2usize)]),
        TK::CommentLine => Vec::from(&[Reduce(PK::LayoutItem1P1, 2usize)]),
        TK::START_COMMENT => Vec::from(&[Reduce(PK::LayoutItem1P1, 2usize)]),
        _ => vec![],
    }
}
fn action_end_comment_s80(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::CommentP1, 3usize)]),
        TK::WS => Vec::from(&[Reduce(PK::CommentP1, 3usize)]),
        TK::CommentLine => Vec::from(&[Reduce(PK::CommentP1, 3usize)]),
        TK::NotComment => Vec::from(&[Reduce(PK::CommentP1, 3usize)]),
        TK::START_COMMENT => Vec::from(&[Reduce(PK::CommentP1, 3usize)]),
        TK::END_COMMENT => Vec::from(&[Reduce(PK::CommentP1, 3usize)]),
        _ => vec![],
    }
}
fn action_cornc_s81(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::WS => Vec::from(&[Reduce(PK::Cornc1P1, 2usize)]),
        TK::CommentLine => Vec::from(&[Reduce(PK::Cornc1P1, 2usize)]),
        TK::NotComment => Vec::from(&[Reduce(PK::Cornc1P1, 2usize)]),
        TK::START_COMMENT => Vec::from(&[Reduce(PK::Cornc1P1, 2usize)]),
        TK::END_COMMENT => Vec::from(&[Reduce(PK::Cornc1P1, 2usize)]),
        _ => vec![],
    }
}
fn goto_aug_s0(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::Pg => State::PgS3,
        NonTermKind::Declarations => State::DeclarationsS4,
        NonTermKind::Declaration1 => State::Declaration1S5,
        NonTermKind::Declaration => State::DeclarationS6,
        NonTermKind::Node => State::NodeS7,
        NonTermKind::Edge => State::EdgeS8,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::AUGS0
            )
        }
    }
}
fn goto_open_paren_s1(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::Id => State::IdS10,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::OPEN_PARENS1
            )
        }
    }
}
fn goto_opensquarebracket_s2(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::Id => State::IdS11,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::OPENSQUAREBRACKETS2
            )
        }
    }
}
fn goto_id_s10(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::LabelsRecord => State::LabelsRecordS14,
        NonTermKind::LabelsOpt => State::LabelsOptS15,
        NonTermKind::Labels => State::LabelsS16,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::IdS10
            )
        }
    }
}
fn goto_semicolon_s12(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::Declaration => State::DeclarationS18,
        NonTermKind::Node => State::NodeS7,
        NonTermKind::Edge => State::EdgeS8,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::SEMICOLONS12
            )
        }
    }
}
fn goto_colon_s13(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::IDENTIFIER1 => State::IDENTIFIER1S20,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::COLONS13
            )
        }
    }
}
fn goto_labelsopt_s15(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::RecordOpt => State::RecordOptS23,
        NonTermKind::Record => State::RecordS24,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::LabelsOptS15
            )
        }
    }
}
fn goto_open_curly_s22(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::Properties => State::PropertiesS28,
        NonTermKind::Property1 => State::Property1S29,
        NonTermKind::Property => State::PropertyS30,
        NonTermKind::key => State::keyS31,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::OPEN_CURLYS22
            )
        }
    }
}
fn goto_comma_s35(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::Property => State::PropertyS38,
        NonTermKind::key => State::keyS31,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::COMMAS35
            )
        }
    }
}
fn goto_colon_s36(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::Values => State::ValuesS45,
        NonTermKind::SingleValue => State::SingleValueS46,
        NonTermKind::BOOL => State::BOOLS47,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::COLONS36
            )
        }
    }
}
fn goto_opensquarebracket_s41(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::ListValues => State::ListValuesS49,
        NonTermKind::SingleValue1 => State::SingleValue1S50,
        NonTermKind::SingleValue0 => State::SingleValue0S51,
        NonTermKind::SingleValue => State::SingleValueS52,
        NonTermKind::BOOL => State::BOOLS47,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::OPENSQUAREBRACKETS41
            )
        }
    }
}
fn goto_start_arrow_s48(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::LabelsRecord => State::LabelsRecordS54,
        NonTermKind::LabelsOpt => State::LabelsOptS15,
        NonTermKind::Labels => State::LabelsS16,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::START_ARROWS48
            )
        }
    }
}
fn goto_comma_s56(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::SingleValue => State::SingleValueS58,
        NonTermKind::BOOL => State::BOOLS47,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::COMMAS56
            )
        }
    }
}
fn goto_augl_s63(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::Layout => State::LayoutS67,
        NonTermKind::LayoutItem1 => State::LayoutItem1S68,
        NonTermKind::LayoutItem0 => State::LayoutItem0S69,
        NonTermKind::LayoutItem => State::LayoutItemS70,
        NonTermKind::Comment => State::CommentS71,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::AUGLS63
            )
        }
    }
}
fn goto_start_comment_s66(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::Comment => State::CommentS74,
        NonTermKind::Corncs => State::CorncsS75,
        NonTermKind::Cornc1 => State::Cornc1S76,
        NonTermKind::Cornc0 => State::Cornc0S77,
        NonTermKind::Cornc => State::CorncS78,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::START_COMMENTS66
            )
        }
    }
}
fn goto_layoutitem1_s68(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::LayoutItem => State::LayoutItemS79,
        NonTermKind::Comment => State::CommentS71,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::LayoutItem1S68
            )
        }
    }
}
fn goto_cornc1_s76(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::Comment => State::CommentS74,
        NonTermKind::Cornc => State::CorncS81,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::Cornc1S76
            )
        }
    }
}
fn goto_invalid(_nonterm_kind: NonTermKind) -> State {
    panic!("Invalid GOTO entry!");
}
pub(crate) static PARSER_DEFINITION: PgParserDefinition = PgParserDefinition {
    actions: [
        action_aug_s0,
        action_open_paren_s1,
        action_opensquarebracket_s2,
        action_pg_s3,
        action_declarations_s4,
        action_declaration1_s5,
        action_declaration_s6,
        action_node_s7,
        action_edge_s8,
        action_identifier_s9,
        action_id_s10,
        action_id_s11,
        action_semicolon_s12,
        action_colon_s13,
        action_labelsrecord_s14,
        action_labelsopt_s15,
        action_labels_s16,
        action_colon_s17,
        action_declaration_s18,
        action_identifier_s19,
        action_identifier1_s20,
        action_close_paren_s21,
        action_open_curly_s22,
        action_recordopt_s23,
        action_record_s24,
        action_open_paren_s25,
        action_ampersand_s26,
        action_identifier_s27,
        action_properties_s28,
        action_property1_s29,
        action_property_s30,
        action_key_s31,
        action_identifier_s32,
        action_identifier_s33,
        action_close_curly_s34,
        action_comma_s35,
        action_colon_s36,
        action_close_paren_s37,
        action_property_s38,
        action_quoted_string_s39,
        action_number_s40,
        action_opensquarebracket_s41,
        action_true_s42,
        action_false_s43,
        action_date_s44,
        action_values_s45,
        action_singlevalue_s46,
        action_bool_s47,
        action_start_arrow_s48,
        action_listvalues_s49,
        action_singlevalue1_s50,
        action_singlevalue0_s51,
        action_singlevalue_s52,
        action_quoted_string_s53,
        action_labelsrecord_s54,
        action_closesquarebracket_s55,
        action_comma_s56,
        action_end_arrow_s57,
        action_singlevalue_s58,
        action_open_paren_s59,
        action_identifier_s60,
        action_close_paren_s61,
        action_closesquarebracket_s62,
        action_augl_s63,
        action_ws_s64,
        action_commentline_s65,
        action_start_comment_s66,
        action_layout_s67,
        action_layoutitem1_s68,
        action_layoutitem0_s69,
        action_layoutitem_s70,
        action_comment_s71,
        action_ws_s72,
        action_notcomment_s73,
        action_comment_s74,
        action_corncs_s75,
        action_cornc1_s76,
        action_cornc0_s77,
        action_cornc_s78,
        action_layoutitem_s79,
        action_end_comment_s80,
        action_cornc_s81,
    ],
    gotos: [
        goto_aug_s0,
        goto_open_paren_s1,
        goto_opensquarebracket_s2,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_id_s10,
        goto_invalid,
        goto_semicolon_s12,
        goto_colon_s13,
        goto_invalid,
        goto_labelsopt_s15,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_open_curly_s22,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_comma_s35,
        goto_colon_s36,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_opensquarebracket_s41,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_start_arrow_s48,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_comma_s56,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_augl_s63,
        goto_invalid,
        goto_invalid,
        goto_start_comment_s66,
        goto_invalid,
        goto_layoutitem1_s68,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_cornc1_s76,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
    ],
    token_kinds: [
        [
            Some((TK::OPEN_PAREN, true)),
            Some((TK::OPENSQUAREBRACKET, true)),
            None,
            None,
            None,
            None,
        ],
        [Some((TK::IDENTIFIER, false)), None, None, None, None, None],
        [Some((TK::IDENTIFIER, false)), None, None, None, None, None],
        [Some((TK::STOP, false)), None, None, None, None, None],
        [Some((TK::STOP, false)), None, None, None, None, None],
        [Some((TK::STOP, true)), Some((TK::SEMICOLON, true)), None, None, None, None],
        [Some((TK::STOP, true)), Some((TK::SEMICOLON, true)), None, None, None, None],
        [Some((TK::STOP, true)), Some((TK::SEMICOLON, true)), None, None, None, None],
        [Some((TK::STOP, true)), Some((TK::SEMICOLON, true)), None, None, None, None],
        [
            Some((TK::CLOSE_PAREN, true)),
            Some((TK::OPEN_CURLY, true)),
            Some((TK::COLON, true)),
            None,
            None,
            None,
        ],
        [
            Some((TK::CLOSE_PAREN, true)),
            Some((TK::OPEN_CURLY, true)),
            Some((TK::COLON, true)),
            None,
            None,
            None,
        ],
        [Some((TK::COLON, true)), None, None, None, None, None],
        [
            Some((TK::OPEN_PAREN, true)),
            Some((TK::OPENSQUAREBRACKET, true)),
            None,
            None,
            None,
            None,
        ],
        [Some((TK::IDENTIFIER, false)), None, None, None, None, None],
        [Some((TK::CLOSE_PAREN, true)), None, None, None, None, None],
        [
            Some((TK::END_ARROW, true)),
            Some((TK::CLOSE_PAREN, true)),
            Some((TK::OPEN_CURLY, true)),
            None,
            None,
            None,
        ],
        [
            Some((TK::END_ARROW, true)),
            Some((TK::CLOSE_PAREN, true)),
            Some((TK::OPEN_CURLY, true)),
            None,
            None,
            None,
        ],
        [Some((TK::OPEN_PAREN, true)), None, None, None, None, None],
        [Some((TK::STOP, true)), Some((TK::SEMICOLON, true)), None, None, None, None],
        [
            Some((TK::END_ARROW, true)),
            Some((TK::CLOSE_PAREN, true)),
            Some((TK::OPEN_CURLY, true)),
            Some((TK::AMPERSAND, true)),
            None,
            None,
        ],
        [
            Some((TK::END_ARROW, true)),
            Some((TK::CLOSE_PAREN, true)),
            Some((TK::OPEN_CURLY, true)),
            Some((TK::AMPERSAND, true)),
            None,
            None,
        ],
        [Some((TK::STOP, true)), Some((TK::SEMICOLON, true)), None, None, None, None],
        [Some((TK::IDENTIFIER, false)), None, None, None, None, None],
        [
            Some((TK::END_ARROW, true)),
            Some((TK::CLOSE_PAREN, true)),
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::END_ARROW, true)),
            Some((TK::CLOSE_PAREN, true)),
            None,
            None,
            None,
            None,
        ],
        [Some((TK::IDENTIFIER, false)), None, None, None, None, None],
        [Some((TK::IDENTIFIER, false)), None, None, None, None, None],
        [Some((TK::COLON, true)), None, None, None, None, None],
        [Some((TK::CLOSE_CURLY, true)), None, None, None, None, None],
        [Some((TK::CLOSE_CURLY, true)), Some((TK::COMMA, true)), None, None, None, None],
        [Some((TK::CLOSE_CURLY, true)), Some((TK::COMMA, true)), None, None, None, None],
        [Some((TK::COLON, true)), None, None, None, None, None],
        [Some((TK::CLOSE_PAREN, true)), None, None, None, None, None],
        [
            Some((TK::END_ARROW, true)),
            Some((TK::CLOSE_PAREN, true)),
            Some((TK::OPEN_CURLY, true)),
            Some((TK::AMPERSAND, true)),
            None,
            None,
        ],
        [
            Some((TK::END_ARROW, true)),
            Some((TK::CLOSE_PAREN, true)),
            None,
            None,
            None,
            None,
        ],
        [Some((TK::IDENTIFIER, false)), None, None, None, None, None],
        [
            Some((TK::FALSE, true)),
            Some((TK::TRUE, true)),
            Some((TK::DATE, true)),
            Some((TK::OPENSQUAREBRACKET, true)),
            Some((TK::QUOTED_STRING, false)),
            Some((TK::NUMBER, false)),
        ],
        [Some((TK::START_ARROW, true)), None, None, None, None, None],
        [Some((TK::CLOSE_CURLY, true)), Some((TK::COMMA, true)), None, None, None, None],
        [
            Some((TK::CLOSE_CURLY, true)),
            Some((TK::COMMA, true)),
            Some((TK::CLOSESQUAREBRACKET, true)),
            None,
            None,
            None,
        ],
        [
            Some((TK::CLOSE_CURLY, true)),
            Some((TK::COMMA, true)),
            Some((TK::CLOSESQUAREBRACKET, true)),
            None,
            None,
            None,
        ],
        [
            Some((TK::FALSE, true)),
            Some((TK::TRUE, true)),
            Some((TK::DATE, true)),
            Some((TK::CLOSESQUAREBRACKET, true)),
            Some((TK::QUOTED_STRING, false)),
            Some((TK::NUMBER, false)),
        ],
        [
            Some((TK::CLOSE_CURLY, true)),
            Some((TK::COMMA, true)),
            Some((TK::CLOSESQUAREBRACKET, true)),
            None,
            None,
            None,
        ],
        [
            Some((TK::CLOSE_CURLY, true)),
            Some((TK::COMMA, true)),
            Some((TK::CLOSESQUAREBRACKET, true)),
            None,
            None,
            None,
        ],
        [Some((TK::QUOTED_STRING, false)), None, None, None, None, None],
        [Some((TK::CLOSE_CURLY, true)), Some((TK::COMMA, true)), None, None, None, None],
        [Some((TK::CLOSE_CURLY, true)), Some((TK::COMMA, true)), None, None, None, None],
        [
            Some((TK::CLOSE_CURLY, true)),
            Some((TK::COMMA, true)),
            Some((TK::CLOSESQUAREBRACKET, true)),
            None,
            None,
            None,
        ],
        [
            Some((TK::END_ARROW, true)),
            Some((TK::OPEN_CURLY, true)),
            Some((TK::COLON, true)),
            None,
            None,
            None,
        ],
        [Some((TK::CLOSESQUAREBRACKET, true)), None, None, None, None, None],
        [
            Some((TK::COMMA, true)),
            Some((TK::CLOSESQUAREBRACKET, true)),
            None,
            None,
            None,
            None,
        ],
        [Some((TK::CLOSESQUAREBRACKET, true)), None, None, None, None, None],
        [
            Some((TK::COMMA, true)),
            Some((TK::CLOSESQUAREBRACKET, true)),
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::CLOSE_CURLY, true)),
            Some((TK::COMMA, true)),
            Some((TK::CLOSESQUAREBRACKET, true)),
            None,
            None,
            None,
        ],
        [Some((TK::END_ARROW, true)), None, None, None, None, None],
        [Some((TK::CLOSE_CURLY, true)), Some((TK::COMMA, true)), None, None, None, None],
        [
            Some((TK::FALSE, true)),
            Some((TK::TRUE, true)),
            Some((TK::DATE, true)),
            Some((TK::QUOTED_STRING, false)),
            Some((TK::NUMBER, false)),
            None,
        ],
        [Some((TK::OPEN_PAREN, true)), None, None, None, None, None],
        [
            Some((TK::COMMA, true)),
            Some((TK::CLOSESQUAREBRACKET, true)),
            None,
            None,
            None,
            None,
        ],
        [Some((TK::IDENTIFIER, false)), None, None, None, None, None],
        [Some((TK::CLOSE_PAREN, true)), None, None, None, None, None],
        [Some((TK::CLOSESQUAREBRACKET, true)), None, None, None, None, None],
        [Some((TK::STOP, true)), Some((TK::SEMICOLON, true)), None, None, None, None],
        [
            Some((TK::STOP, true)),
            Some((TK::START_COMMENT, true)),
            Some((TK::WS, false)),
            Some((TK::CommentLine, false)),
            None,
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::START_COMMENT, true)),
            Some((TK::WS, false)),
            Some((TK::CommentLine, false)),
            None,
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::START_COMMENT, true)),
            Some((TK::END_COMMENT, true)),
            Some((TK::WS, false)),
            Some((TK::CommentLine, false)),
            Some((TK::NotComment, false)),
        ],
        [
            Some((TK::START_COMMENT, true)),
            Some((TK::END_COMMENT, true)),
            Some((TK::WS, false)),
            Some((TK::CommentLine, false)),
            Some((TK::NotComment, false)),
            None,
        ],
        [Some((TK::STOP, false)), None, None, None, None, None],
        [
            Some((TK::STOP, true)),
            Some((TK::START_COMMENT, true)),
            Some((TK::WS, false)),
            Some((TK::CommentLine, false)),
            None,
            None,
        ],
        [Some((TK::STOP, false)), None, None, None, None, None],
        [
            Some((TK::STOP, true)),
            Some((TK::START_COMMENT, true)),
            Some((TK::WS, false)),
            Some((TK::CommentLine, false)),
            None,
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::START_COMMENT, true)),
            Some((TK::WS, false)),
            Some((TK::CommentLine, false)),
            None,
            None,
        ],
        [
            Some((TK::START_COMMENT, true)),
            Some((TK::END_COMMENT, true)),
            Some((TK::WS, false)),
            Some((TK::CommentLine, false)),
            Some((TK::NotComment, false)),
            None,
        ],
        [
            Some((TK::START_COMMENT, true)),
            Some((TK::END_COMMENT, true)),
            Some((TK::WS, false)),
            Some((TK::CommentLine, false)),
            Some((TK::NotComment, false)),
            None,
        ],
        [
            Some((TK::START_COMMENT, true)),
            Some((TK::END_COMMENT, true)),
            Some((TK::WS, false)),
            Some((TK::CommentLine, false)),
            Some((TK::NotComment, false)),
            None,
        ],
        [Some((TK::END_COMMENT, true)), None, None, None, None, None],
        [
            Some((TK::START_COMMENT, true)),
            Some((TK::END_COMMENT, true)),
            Some((TK::WS, false)),
            Some((TK::CommentLine, false)),
            Some((TK::NotComment, false)),
            None,
        ],
        [Some((TK::END_COMMENT, true)), None, None, None, None, None],
        [
            Some((TK::START_COMMENT, true)),
            Some((TK::END_COMMENT, true)),
            Some((TK::WS, false)),
            Some((TK::CommentLine, false)),
            Some((TK::NotComment, false)),
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::START_COMMENT, true)),
            Some((TK::WS, false)),
            Some((TK::CommentLine, false)),
            None,
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::START_COMMENT, true)),
            Some((TK::END_COMMENT, true)),
            Some((TK::WS, false)),
            Some((TK::CommentLine, false)),
            Some((TK::NotComment, false)),
        ],
        [
            Some((TK::START_COMMENT, true)),
            Some((TK::END_COMMENT, true)),
            Some((TK::WS, false)),
            Some((TK::CommentLine, false)),
            Some((TK::NotComment, false)),
            None,
        ],
    ],
};
impl ParserDefinition<State, ProdKind, TokenKind, NonTermKind> for PgParserDefinition {
    fn actions(&self, state: State, token: TokenKind) -> Vec<Action<State, ProdKind>> {
        PARSER_DEFINITION.actions[state as usize](token)
    }
    fn goto(&self, state: State, nonterm: NonTermKind) -> State {
        PARSER_DEFINITION.gotos[state as usize](nonterm)
    }
    fn expected_token_kinds(&self, state: State) -> Vec<(TokenKind, bool)> {
        PARSER_DEFINITION.token_kinds[state as usize].iter().map_while(|t| *t).collect()
    }
    fn longest_match() -> bool {
        true
    }
    fn grammar_order() -> bool {
        true
    }
}
pub(crate) type Context<'i, I> = LRContext<'i, I, State, TokenKind>;
pub struct PgParser<
    'i,
    I: InputT + ?Sized,
    L: Lexer<'i, Context<'i, I>, State, TokenKind, Input = I>,
    B,
>(
    LRParser<
        'i,
        Context<'i, I>,
        State,
        ProdKind,
        TokenKind,
        NonTermKind,
        PgParserDefinition,
        L,
        B,
        I,
    >,
);
#[allow(dead_code)]
impl<
    'i,
> PgParser<
    'i,
    Input,
    StringLexer<Context<'i, Input>, State, TokenKind, TokenRecognizer, TERMINAL_COUNT>,
    DefaultBuilder,
> {
    pub fn new() -> Self {
        Self(
            LRParser::new(
                &PARSER_DEFINITION,
                State::default(),
                false,
                true,
                StringLexer::new(false, &RECOGNIZERS),
                DefaultBuilder::new(),
            ),
        )
    }
}
#[allow(dead_code)]
impl<'i, I, L, B> Parser<'i, I, Context<'i, I>, State, TokenKind>
for PgParser<'i, I, L, B>
where
    I: InputT + ?Sized + Debug,
    L: Lexer<'i, Context<'i, I>, State, TokenKind, Input = I>,
    B: LRBuilder<'i, I, Context<'i, I>, State, ProdKind, TokenKind>,
{
    type Output = B::Output;
    fn parse(&self, input: &'i I) -> Result<Self::Output> {
        self.0.parse(input)
    }
    fn parse_with_context(
        &self,
        context: &mut Context<'i, I>,
        input: &'i I,
    ) -> Result<Self::Output> {
        self.0.parse_with_context(context, input)
    }
    fn parse_file<'a, F: AsRef<std::path::Path>>(
        &'a mut self,
        file: F,
    ) -> Result<Self::Output>
    where
        'a: 'i,
    {
        self.0.parse_file(file)
    }
}
#[allow(dead_code)]
#[derive(Debug)]
pub enum Recognizer {
    Stop,
    StrMatch(&'static str),
    RegexMatch(Lazy<Regex>),
}
#[allow(dead_code)]
#[derive(Debug)]
pub struct TokenRecognizer(TokenKind, Recognizer);
impl<'i> TokenRecognizerT<'i> for TokenRecognizer {
    fn recognize(&self, input: &'i str) -> Option<&'i str> {
        match &self {
            #[allow(unused_variables)]
            TokenRecognizer(token_kind, Recognizer::StrMatch(s)) => {
                logn!("{} {:?} -- ", "    Recognizing".green(), token_kind);
                if input.starts_with(s) {
                    log!("{}", "recognized".bold().green());
                    Some(s)
                } else {
                    log!("{}", "not recognized".red());
                    None
                }
            }
            #[allow(unused_variables)]
            TokenRecognizer(token_kind, Recognizer::RegexMatch(r)) => {
                logn!("{} {:?} -- ", "    Recognizing".green(), token_kind);
                let match_str = r.find(input);
                match match_str {
                    Some(x) => {
                        let x_str = x.as_str();
                        log!("{} '{}'", "recognized".bold().green(), x_str);
                        Some(x_str)
                    }
                    _ => {
                        log!("{}", "not recognized".red());
                        None
                    }
                }
            }
            TokenRecognizer(_, Recognizer::Stop) => {
                logn!("{} STOP -- ", "    Recognizing".green());
                if input.is_empty() {
                    log!("{}", "recognized".bold().green());
                    Some("")
                } else {
                    log!("{}", "not recognized".red());
                    None
                }
            }
        }
    }
}
pub(crate) static RECOGNIZERS: [TokenRecognizer; TERMINAL_COUNT] = [
    TokenRecognizer(TokenKind::STOP, Recognizer::Stop),
    TokenRecognizer(
        TokenKind::WS,
        Recognizer::RegexMatch(
            Lazy::new(|| { Regex::new(concat!("^", "\\s+")).unwrap() }),
        ),
    ),
    TokenRecognizer(
        TokenKind::CommentLine,
        Recognizer::RegexMatch(
            Lazy::new(|| { Regex::new(concat!("^", "//.*")).unwrap() }),
        ),
    ),
    TokenRecognizer(
        TokenKind::NotComment,
        Recognizer::RegexMatch(
            Lazy::new(|| {
                Regex::new(concat!("^", "((\\*[^/])|[^\\s*/]|/[^\\*])+")).unwrap()
            }),
        ),
    ),
    TokenRecognizer(TokenKind::START_COMMENT, Recognizer::StrMatch("/*")),
    TokenRecognizer(TokenKind::END_COMMENT, Recognizer::StrMatch("*/")),
    TokenRecognizer(
        TokenKind::QUOTED_STRING,
        Recognizer::RegexMatch(
            Lazy::new(|| { Regex::new(concat!("^", "\"((\\\\\")|[^\"])*\"")).unwrap() }),
        ),
    ),
    TokenRecognizer(
        TokenKind::IDENTIFIER,
        Recognizer::RegexMatch(
            Lazy::new(|| { Regex::new(concat!("^", "\\w+")).unwrap() }),
        ),
    ),
    TokenRecognizer(TokenKind::SEMICOLON, Recognizer::StrMatch(";")),
    TokenRecognizer(TokenKind::CREATE, Recognizer::StrMatch("CREATE")),
    TokenRecognizer(TokenKind::NODE, Recognizer::StrMatch("NODE")),
    TokenRecognizer(TokenKind::EDGE, Recognizer::StrMatch("EDGE")),
    TokenRecognizer(TokenKind::GRAPH, Recognizer::StrMatch("GRAPH")),
    TokenRecognizer(TokenKind::TYPE, Recognizer::StrMatch("TYPE")),
    TokenRecognizer(TokenKind::OPEN_PAREN, Recognizer::StrMatch("(")),
    TokenRecognizer(TokenKind::CLOSE_PAREN, Recognizer::StrMatch(")")),
    TokenRecognizer(TokenKind::OPEN_ARROW, Recognizer::StrMatch("-[")),
    TokenRecognizer(TokenKind::CLOSE_ARROW, Recognizer::StrMatch("]->")),
    TokenRecognizer(TokenKind::OPEN_CURLY, Recognizer::StrMatch("{")),
    TokenRecognizer(TokenKind::CLOSE_CURLY, Recognizer::StrMatch("}")),
    TokenRecognizer(TokenKind::COLON, Recognizer::StrMatch(":")),
    TokenRecognizer(TokenKind::COMMA, Recognizer::StrMatch(",")),
    TokenRecognizer(TokenKind::BAR, Recognizer::StrMatch("|")),
    TokenRecognizer(TokenKind::PLUS, Recognizer::StrMatch("+")),
    TokenRecognizer(TokenKind::STAR, Recognizer::StrMatch("*")),
    TokenRecognizer(TokenKind::QUESTION, Recognizer::StrMatch("?")),
    TokenRecognizer(TokenKind::INTEGER_NAME, Recognizer::StrMatch("INTEGER")),
    TokenRecognizer(TokenKind::STRING_NAME, Recognizer::StrMatch("STRING")),
    TokenRecognizer(TokenKind::DATE_NAME, Recognizer::StrMatch("DATE")),
    TokenRecognizer(
        TokenKind::NUMBER,
        Recognizer::RegexMatch(
            Lazy::new(|| { Regex::new(concat!("^", "\\d+")).unwrap() }),
        ),
    ),
    TokenRecognizer(TokenKind::OPTIONAL, Recognizer::StrMatch("OPTIONAL")),
    TokenRecognizer(TokenKind::QUOTE, Recognizer::StrMatch("\\\"")),
    TokenRecognizer(TokenKind::AMPERSAND, Recognizer::StrMatch("&")),
    TokenRecognizer(TokenKind::OPENSQUAREBRACKET, Recognizer::StrMatch("[")),
    TokenRecognizer(TokenKind::CLOSESQUAREBRACKET, Recognizer::StrMatch("]")),
    TokenRecognizer(TokenKind::START_ARROW, Recognizer::StrMatch("-[")),
    TokenRecognizer(TokenKind::END_ARROW, Recognizer::StrMatch("]->")),
    TokenRecognizer(TokenKind::TRUE, Recognizer::StrMatch("TRUE")),
    TokenRecognizer(TokenKind::FALSE, Recognizer::StrMatch("FALSE")),
    TokenRecognizer(TokenKind::DATE, Recognizer::StrMatch("DATE")),
];
pub struct DefaultBuilder {
    res_stack: Vec<Symbol>,
}
impl DefaultBuilder {
    #[allow(dead_code)]
    pub fn new() -> Self {
        Self { res_stack: vec![] }
    }
}
impl Builder for DefaultBuilder {
    type Output = pg_actions::Pg;
    fn get_result(&mut self) -> Self::Output {
        match self.res_stack.pop().unwrap() {
            Symbol::NonTerminal(NonTerminal::Pg(r)) => r,
            _ => panic!("Invalid result on the parse stack!"),
        }
    }
}
impl<'i> LRBuilder<'i, Input, Context<'i, Input>, State, ProdKind, TokenKind>
for DefaultBuilder {
    #![allow(unused_variables)]
    fn shift_action(
        &mut self,
        context: &Context<'i, Input>,
        token: Token<'i, Input, TokenKind>,
    ) {
        let val = match token.kind {
            TokenKind::STOP => panic!("Cannot shift STOP token!"),
            TokenKind::QUOTED_STRING => {
                Terminal::QUOTED_STRING(pg_actions::quoted_string(context, token))
            }
            TokenKind::IDENTIFIER => {
                Terminal::IDENTIFIER(pg_actions::identifier(context, token))
            }
            TokenKind::SEMICOLON => Terminal::SEMICOLON,
            TokenKind::OPEN_PAREN => Terminal::OPEN_PAREN,
            TokenKind::CLOSE_PAREN => Terminal::CLOSE_PAREN,
            TokenKind::OPEN_CURLY => Terminal::OPEN_CURLY,
            TokenKind::CLOSE_CURLY => Terminal::CLOSE_CURLY,
            TokenKind::COLON => Terminal::COLON,
            TokenKind::COMMA => Terminal::COMMA,
            TokenKind::NUMBER => Terminal::NUMBER(pg_actions::number(context, token)),
            TokenKind::AMPERSAND => Terminal::AMPERSAND,
            TokenKind::OPENSQUAREBRACKET => Terminal::OPENSQUAREBRACKET,
            TokenKind::CLOSESQUAREBRACKET => Terminal::CLOSESQUAREBRACKET,
            TokenKind::START_ARROW => Terminal::START_ARROW,
            TokenKind::END_ARROW => Terminal::END_ARROW,
            TokenKind::TRUE => Terminal::TRUE,
            TokenKind::FALSE => Terminal::FALSE,
            TokenKind::DATE => Terminal::DATE,
            _ => panic!("Shift of unreachable terminal!"),
        };
        self.res_stack.push(Symbol::Terminal(val));
    }
    fn reduce_action(
        &mut self,
        context: &Context<'i, Input>,
        prod: ProdKind,
        prod_len: usize,
    ) {
        let prod = match prod {
            ProdKind::PgP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::Declarations(p0)) => {
                        NonTerminal::Pg(pg_actions::pg_declarations(context, p0))
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::DeclarationsP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::Declaration1(p0)) => {
                        NonTerminal::Declarations(
                            pg_actions::declarations_declaration1(context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::Declaration1P1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::Declaration1(p0)),
                        _,
                        Symbol::NonTerminal(NonTerminal::Declaration(p1)),
                    ) => {
                        NonTerminal::Declaration1(
                            pg_actions::declaration1_c1(context, p0, p1),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::Declaration1P2 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::Declaration(p0)) => {
                        NonTerminal::Declaration1(
                            pg_actions::declaration1_declaration(context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::DeclarationP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::Node(p0)) => {
                        NonTerminal::Declaration(
                            pg_actions::declaration_node(context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::DeclarationP2 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::Edge(p0)) => {
                        NonTerminal::Declaration(
                            pg_actions::declaration_edge(context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::NodeP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 4usize)
                    .into_iter();
                match (
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                ) {
                    (
                        _,
                        Symbol::NonTerminal(NonTerminal::Id(p0)),
                        Symbol::NonTerminal(NonTerminal::LabelsRecord(p1)),
                        _,
                    ) => NonTerminal::Node(pg_actions::node_c1(context, p0, p1)),
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::EdgeP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 13usize)
                    .into_iter();
                match (
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                ) {
                    (
                        _,
                        Symbol::NonTerminal(NonTerminal::Id(p0)),
                        _,
                        _,
                        Symbol::Terminal(Terminal::IDENTIFIER(p1)),
                        _,
                        _,
                        Symbol::NonTerminal(NonTerminal::LabelsRecord(p2)),
                        _,
                        _,
                        Symbol::Terminal(Terminal::IDENTIFIER(p3)),
                        _,
                        _,
                    ) => NonTerminal::Edge(pg_actions::edge_c1(context, p0, p1, p2, p3)),
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::IdP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::Terminal(Terminal::IDENTIFIER(p0)) => {
                        NonTerminal::Id(pg_actions::id_identifier(context, p0))
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::LabelsRecordP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 2usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::LabelsOpt(p0)),
                        Symbol::NonTerminal(NonTerminal::RecordOpt(p1)),
                    ) => {
                        NonTerminal::LabelsRecord(
                            pg_actions::labels_record_c1(context, p0, p1),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::LabelsOptP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::Labels(p0)) => {
                        NonTerminal::LabelsOpt(
                            pg_actions::labels_opt_labels(context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::LabelsOptP2 => {
                NonTerminal::LabelsOpt(pg_actions::labels_opt_empty(context))
            }
            ProdKind::RecordOptP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::Record(p0)) => {
                        NonTerminal::RecordOpt(
                            pg_actions::record_opt_record(context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::RecordOptP2 => {
                NonTerminal::RecordOpt(pg_actions::record_opt_empty(context))
            }
            ProdKind::LabelsP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 2usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap()) {
                    (_, Symbol::NonTerminal(NonTerminal::IDENTIFIER1(p0))) => {
                        NonTerminal::Labels(pg_actions::labels_identifier1(context, p0))
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::IDENTIFIER1P1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::IDENTIFIER1(p0)),
                        _,
                        Symbol::Terminal(Terminal::IDENTIFIER(p1)),
                    ) => {
                        NonTerminal::IDENTIFIER1(
                            pg_actions::identifier1_c1(context, p0, p1),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::IDENTIFIER1P2 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::Terminal(Terminal::IDENTIFIER(p0)) => {
                        NonTerminal::IDENTIFIER1(
                            pg_actions::identifier1_identifier(context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::RecordP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (_, Symbol::NonTerminal(NonTerminal::Properties(p0)), _) => {
                        NonTerminal::Record(pg_actions::record_properties(context, p0))
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::PropertiesP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::Property1(p0)) => {
                        NonTerminal::Properties(
                            pg_actions::properties_property1(context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::Property1P1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::Property1(p0)),
                        _,
                        Symbol::NonTerminal(NonTerminal::Property(p1)),
                    ) => {
                        NonTerminal::Property1(pg_actions::property1_c1(context, p0, p1))
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::Property1P2 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::Property(p0)) => {
                        NonTerminal::Property1(
                            pg_actions::property1_property(context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::PropertyP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::key(p0)),
                        _,
                        Symbol::NonTerminal(NonTerminal::Values(p1)),
                    ) => NonTerminal::Property(pg_actions::property_c1(context, p0, p1)),
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::keyP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::Terminal(Terminal::IDENTIFIER(p0)) => {
                        NonTerminal::key(pg_actions::key_identifier(context, p0))
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::ValuesP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::SingleValue(p0)) => {
                        NonTerminal::Values(pg_actions::values_single_value(context, p0))
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::ValuesListValue => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (_, Symbol::NonTerminal(NonTerminal::ListValues(p0)), _) => {
                        NonTerminal::Values(pg_actions::values_list_value(context, p0))
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::ListValuesP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::SingleValue0(p0)) => {
                        NonTerminal::ListValues(
                            pg_actions::list_values_single_value0(context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::SingleValue1P1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::SingleValue1(p0)),
                        _,
                        Symbol::NonTerminal(NonTerminal::SingleValue(p1)),
                    ) => {
                        NonTerminal::SingleValue1(
                            pg_actions::single_value1_c1(context, p0, p1),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::SingleValue1P2 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::SingleValue(p0)) => {
                        NonTerminal::SingleValue1(
                            pg_actions::single_value1_single_value(context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::SingleValue0P1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::SingleValue1(p0)) => {
                        NonTerminal::SingleValue0(
                            pg_actions::single_value0_single_value1(context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::SingleValue0P2 => {
                NonTerminal::SingleValue0(pg_actions::single_value0_empty(context))
            }
            ProdKind::SingleValueStringValue => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::Terminal(Terminal::QUOTED_STRING(p0)) => {
                        NonTerminal::SingleValue(
                            pg_actions::single_value_string_value(context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::SingleValueNumberValue => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::Terminal(Terminal::NUMBER(p0)) => {
                        NonTerminal::SingleValue(
                            pg_actions::single_value_number_value(context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::SingleValueDateValue => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 2usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap()) {
                    (_, Symbol::Terminal(Terminal::QUOTED_STRING(p0))) => {
                        NonTerminal::SingleValue(
                            pg_actions::single_value_date_value(context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::SingleValueBooleanValue => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::BOOL(p0)) => {
                        NonTerminal::SingleValue(
                            pg_actions::single_value_boolean_value(context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::BOOLP1 => {
                let _ = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                NonTerminal::BOOL(pg_actions::bool_true(context))
            }
            ProdKind::BOOLP2 => {
                let _ = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                NonTerminal::BOOL(pg_actions::bool_false(context))
            }
            _ => panic!("Reduce of unreachable nonterminal!"),
        };
        self.res_stack.push(Symbol::NonTerminal(prod));
    }
}
